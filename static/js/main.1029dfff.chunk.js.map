{"version":3,"sources":["Components/form.jsx","util/index.js","Components/progress.jsx","Components/info.jsx","App.js","index.js"],"names":["Form","block","returnGuessToApp","style","marginTop","onSubmit","e","preventDefault","guess","target","elements","value","TextField","paddingBottom","fullWidth","type","inputProps","min","max","step","label","name","required","Button","variant","color","getInitialState","actual","Math","floor","random","undefined","allGuesses","attempt","feedbackMessage","feedbackColor","getFeedback","absDiff","Progress","guessList","className","marginBottom","Info","state","open","handleToggle","setState","this","Fragment","Dialog","onClose","DialogTitle","DialogContent","onClick","React","Component","App","resetGame","updateAppState","abs","prevState","show","map","item","index","key","Grid","container","height","justify","alignItems","xs","sm","Paper","padding","elevation","Typography","align","gutterBottom","Divider","margin","toLowerCase","handleClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1029dfff.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField,Button } from '@material-ui/core';\n\nconst Form = ({ block, returnGuessToApp }) => {\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (!block) {\n\t\t\tconst guess = e.target.elements.guess.value;\n\t\t\te.target.elements.guess.value = \"\";\n\t\t\treturnGuessToApp(guess);\n\t\t}\n\t}\n\n\treturn (\n\t\t<form style={{marginTop: \"20px\"}} onSubmit={onSubmit}>\n\t\t\t<TextField style={{ paddingBottom: '20px'}} fullWidth type=\"number\" inputProps={{ min: '0', max: '100', step: '1' }} label=\"Enter your guess...\" name=\"guess\" required/>\n\t\t\t<Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Guess</Button>\n\t\t</form>\n\t)\n}\n\nexport default Form;","export const generateRandomNumber = () => Math.floor(Math.random() * 100) + 1; \n\nexport const getInitialState = () => ({\n  actual: generateRandomNumber(),\n  guess: undefined,\n  allGuesses: [],\n  attempt: 0,\n  feedbackMessage: 'Dare to guess...',\n  feedbackColor: '#fff',\n  block: false,\n});\n\nexport const getFeedback = (absDiff) => {\n\tlet feedbackMessage;\n\tlet feedbackColor;\n\n\tif (absDiff === 0){\n\t\tfeedbackMessage = \"You Won! Reset the game to play again.\";\n\t\tfeedbackColor = '#000';\n\t}else if(absDiff < 4 && absDiff !== 0){\n\t\tfeedbackColor = '#ff5722';\n\t\tfeedbackMessage = 'Extremely Hot!';\n\t}else if (absDiff >= 4 && absDiff < 10) {\n\t    feedbackColor = '#ff9800';\n\t    feedbackMessage = 'Hot';\n\t}else if (absDiff >= 10 && absDiff < 20) {\n\t    feedbackColor = '#ffeb38';\n\t    feedbackMessage = 'Warm';\n\t}else {\n\t    feedbackColor = '#5bc0de';\n\t    feedbackMessage = 'Cold';\n\t}\n\n\treturn {\n\t\tfeedbackColor,\n\t\tfeedbackMessage\n\t};\n\n}","import React from 'react';\nimport './progress.css';\n\nconst Progress = ({attempt, guessList}) => (\n\t<div style={{marginTop: '50px'}} className=\"progressBar\">\n\t\t<h2 style={{marginBottom: 0}}>\n\t\t\tGuess # {attempt}\n\t\t</h2>\n\t\t<ul style={{marginTop: '10px'}} className=\"progressBar_history\">\n\t\t\t{guessList}\n\t\t</ul>\n\t</div>\n);\n\nexport default Progress;","\nimport React from 'react';\n\nimport { Button, DialogTitle, Dialog, DialogContent } from '@material-ui/core';\n\nclass Info extends React.Component {\n  state = { open: false }\n\n  handleToggle = () => this.setState({ open: !this.state.open });\n\n  render() {\n    const { open } = this.state;\n\n    return (\n      <React.Fragment>\n        <Dialog open={open} onClose={this.handleToggle}>\n          <DialogTitle>Game Rules</DialogTitle>\n          <DialogContent>This is a Number Guessing Game with the following rules:\n            <ol>\n              <li>The machine picks a random number between 1 to 100 and keeps it hidden.</li>\n              <li>You need to guess until you can find the hidden secret number.</li>\n              <li>You will get feedback on how close or far your guess is in the form of the following keywords (\"cold\", \"warm\", \"hot\", \"extremely hot\").</li>\n            </ol>\n            Everything clear?\n          </DialogContent>\n          <Button onClick={this.handleToggle}>YES</Button>\n        </Dialog>\n        <Button fullWidth variant=\"contained\" color=\"primary\" onClick={this.handleToggle}>How to Play</Button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Info;","import React from 'react';\nimport { Grid, Typography, Paper, Divider, Button } from '@material-ui/core';\nimport Form from './Components/form';\nimport { getInitialState, getFeedback } from './util';\nimport Progress from './Components/progress';\nimport './App.css';\nimport Info from './Components/info'\n\n\nclass App extends React.Component {\n  state = getInitialState();\n\n  resetGame = () => this.setState(getInitialState());\n\n  updateAppState = (guess) => {\n    const { actual } = this.state;\n    const absDiff = Math.abs(guess - actual);\n    const {feedbackMessage, feedbackColor } = getFeedback(absDiff);\n\n    this.setState(prevState => ({\n      guess,\n      allGuesses: [...prevState.allGuesses, {guess, feedbackColor }],\n      attempt: prevState.attempt + 1,\n      feedbackMessage,\n      block: absDiff === 0,\n    }));\n  }\n\n  render() {\n\n    const { allGuesses, attempt, feedbackMessage,show, block } = this.state\n    const guessList = allGuesses.map((item, index) => (\n        <li key={index}>\n          <span>{item.guess}</span>\n        </li>\n      )\n    );\n\n    return (\n      <Grid container style={{height: '100vh'}} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={10} sm={3}>\n          <Paper style={{padding: '50px'}} elevation={6}>\n            <Typography align=\"center\" variant=\"h3\" gutterBottom > HOT or COLD </Typography>\n            <Divider style={{ margin: '20px 0'}} />\n            <div className={`feedback ${feedbackMessage[0].toLowerCase()}`}>\n              <h2 className='feedback-text'>{feedbackMessage}</h2>\n            </div>\n            <Form block={block} returnGuessToApp={value => this.updateAppState(value)}/>\n            <Progress feedbackMessage={feedbackMessage} attempt={attempt} guessList={guessList} />\n            <Button style={{ marginBottom: '15px' }} fullWidth variant=\"contained\" color=\"primary\" onClick={this.resetGame} >Reset Game</Button>\n            <Info show={show} onClose={this.handleClose}/>\n          </Paper>\n        </Grid>\n      </Grid>\n            )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}